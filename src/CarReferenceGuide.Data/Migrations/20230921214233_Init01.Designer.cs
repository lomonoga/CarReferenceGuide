// <auto-generated />
using System;
using System.Collections.Generic;
using CarReferenceGuide.Data;
using CarReferenceGuide.Data.Domain.Models;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace CarReferenceGuide.Data.Migrations
{
    [DbContext(typeof(CarReferenceGuideDbContext))]
    [Migration("20230921214233_Init01")]
    partial class Init01
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("CarOwnerCar", b =>
                {
                    b.Property<Guid>("CarsId")
                        .HasColumnType("uuid");

                    b.Property<Guid>("OwnersId")
                        .HasColumnType("uuid");

                    b.HasKey("CarsId", "OwnersId");

                    b.HasIndex("OwnersId");

                    b.ToTable("CarOwnerCar");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.BrandCar", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("CountryId");

                    b.ToTable("BrandsCars");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.Car", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("ColorId")
                        .HasColumnType("uuid");

                    b.Property<Guid?>("CountryOfManufactureId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Drive")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<double>("EngineVolume")
                        .HasColumnType("double precision");

                    b.Property<string>("Gasoline")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<int>("Mileage")
                        .HasColumnType("integer");

                    b.Property<Guid>("ModelId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<List<FileData>>("Photos")
                        .HasColumnType("jsonb");

                    b.Property<string>("StateNumber")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TransmissionBox")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Weight")
                        .HasColumnType("integer");

                    b.Property<int>("YearOfRelease")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("ColorId");

                    b.HasIndex("CountryOfManufactureId");

                    b.HasIndex("ModelId");

                    b.ToTable("Cars");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.ColorCar", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Colors");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.Country", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.ToTable("Countries");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.ModelCar", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<Guid?>("BrandId")
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.HasAlternateKey("Name");

                    b.HasIndex("BrandId");

                    b.ToTable("ModelsCars");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.OwnerCar", b =>
                {
                    b.Property<Guid?>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid");

                    b.Property<DateTime?>("Birthday")
                        .HasColumnType("timestamp without time zone");

                    b.Property<DateTime?>("CreatedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<string>("Fio")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ModifiedOn")
                        .HasColumnType("timestamp without time zone");

                    b.Property<int?>("PassportNumber")
                        .IsRequired()
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasAlternateKey("PassportNumber");

                    b.ToTable("OwnersCars");
                });

            modelBuilder.Entity("CarOwnerCar", b =>
                {
                    b.HasOne("CarReferenceGuide.Data.Domain.Models.Car", null)
                        .WithMany()
                        .HasForeignKey("CarsId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("CarReferenceGuide.Data.Domain.Models.OwnerCar", null)
                        .WithMany()
                        .HasForeignKey("OwnersId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.BrandCar", b =>
                {
                    b.HasOne("CarReferenceGuide.Data.Domain.Models.Country", "Country")
                        .WithMany("Brands")
                        .HasForeignKey("CountryId");

                    b.Navigation("Country");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.Car", b =>
                {
                    b.HasOne("CarReferenceGuide.Data.Domain.Models.ColorCar", "Color")
                        .WithMany("Cars")
                        .HasForeignKey("ColorId")
                        .OnDelete(DeleteBehavior.SetNull);

                    b.HasOne("CarReferenceGuide.Data.Domain.Models.Country", "CountryOfManufacture")
                        .WithMany("Cars")
                        .HasForeignKey("CountryOfManufactureId");

                    b.HasOne("CarReferenceGuide.Data.Domain.Models.ModelCar", "Model")
                        .WithMany("Cars")
                        .HasForeignKey("ModelId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Color");

                    b.Navigation("CountryOfManufacture");

                    b.Navigation("Model");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.ModelCar", b =>
                {
                    b.HasOne("CarReferenceGuide.Data.Domain.Models.BrandCar", "Brand")
                        .WithMany("Models")
                        .HasForeignKey("BrandId");

                    b.Navigation("Brand");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.BrandCar", b =>
                {
                    b.Navigation("Models");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.ColorCar", b =>
                {
                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.Country", b =>
                {
                    b.Navigation("Brands");

                    b.Navigation("Cars");
                });

            modelBuilder.Entity("CarReferenceGuide.Data.Domain.Models.ModelCar", b =>
                {
                    b.Navigation("Cars");
                });
#pragma warning restore 612, 618
        }
    }
}
